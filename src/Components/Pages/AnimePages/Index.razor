@page "/animes"
@implements IAsyncDisposable
@inject IDbContextFactory<AnimeCloneContext> DbFactory

<PageTitle>Index</PageTitle>

@* <h1>Index</h1> *@

@* <p> *@
@*     <a href="animes/create">Create New</a> *@
@* </p> *@

@* <QuickGrid Class="table" Items="context.Animes">  *@
@*     <PropertyColumn Property="anime => anime.Title" />  *@
@*      <PropertyColumn Property="anime => anime.Type" />  *@
@*      <PropertyColumn Property="anime => anime.Episodes" />  *@
@*      <PropertyColumn Property="anime => anime.Status" />  *@
@*      <PropertyColumn Property="anime => anime.Picture" />  *@
@*      <PropertyColumn Property="anime => anime.Thumbnail" />  *@
@*      <PropertyColumn Property="anime => anime.DurationId" />  *@
@*      <PropertyColumn Property="anime => anime.AnimeSeasonId" />  *@
@*      <PropertyColumn Property="anime => anime.Sources" />  *@
@*      <PropertyColumn Property="anime => anime.Synonyms" />  *@
@*      <PropertyColumn Property="anime => anime.RelatedAnime" />  *@
@*      <PropertyColumn Property="anime => anime.Tags" />  *@

@*      <TemplateColumn Context="anime">  *@
@*          <a href="@($"animes/edit?id={anime.Id}")">Edit</a> |  *@
@*          <a href="@($"animes/details?id={anime.Id}")">Details</a> | *@
@*          <a href="@($"animes/delete?id={anime.Id}")">Delete</a> *@
@*      </TemplateColumn> *@
@* </QuickGrid> *@

@* @code { *@
@*     private AnimeCloneContext context = default!; *@

@*     protected override void OnInitialized() *@
@*     { *@
@*         context = DbFactory.CreateDbContext(); *@
@*     } *@

@*     public async ValueTask DisposeAsync() => await context.DisposeAsync(); *@
@* } *@

@using System.Net.Http.Json
@using System.Diagnostics.CodeAnalysis

<MudDataGrid T="Anime" MultiSelection="true" Items="@Animes" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
Hideable="true" RowClick="@RowClicked" RowContextMenuClick="RowRightClicked" SelectedItemsChanged="@SelectedItemsChanged">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Animes</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
        AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="Anime" />
        <PropertyColumn Property="x => x.Title" Title="Nr" Sortable="false" Filterable="false" />
        <PropertyColumn Property="x => x.Type" />
        <PropertyColumn Property="x => x.Episodes" SortBy="@_sortBy" />
        <PropertyColumn Property="x => x.Status" Title="Status"/>
        <PropertyColumn Property="x => x.Tags" Title="Tags" />
        <PropertyColumn Property="x => x.Synonyms" Title="Synonyms" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Anime" />
    </PagerContent>
</MudDataGrid>

<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Value="@_sortNameByLength" Color="Color.Primary">Sort Name Column By Length</MudSwitch>
</div>

<MudExpansionPanels Style="flex:1">
    <MudExpansionPanel Text="Show Events">
        @foreach (var message in _events)
        {
            <MudText Typo="@Typo.body2">@message</MudText>
        }
        @if (_events.Count > 0)
        {
            <div class="d-flex">
                <MudSpacer />
                <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    private IEnumerable<Anime> Animes = new List<Anime>();
    private string _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();
    // custom sort by name length
    private Func<Anime, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.Title.Length;
        else
            return x.Title;
    };
    // quick filter - filter globally across multiple columns with the same input
    private Func<Anime, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Title.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Synonyms.Any((s) => s.Equals(_searchString, StringComparison.OrdinalIgnoreCase)))
            return true;

        if (x.Tags.Any(s => s.Equals(_searchString, StringComparison.OrdinalIgnoreCase)))
            return true;

        // if ($"{x.Number} {x.Position} {x.Molar}".Contains(_searchString))
        //     return true;

        return false;
    };

    private AnimeCloneContext context = default!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        context = DbFactory.CreateDbContext();
        Animes = context.Animes;
    }

    // protected override async Task OnInitializedAsync()
    // {
    //     Elements = await httpClient.GetFromJsonAsync<List<Element>>("webapi/periodictable");
    // }

    // events
    void RowClicked(DataGridRowClickEventArgs<Anime> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void RowRightClicked(DataGridRowClickEventArgs<Anime> args)
    {
        _events.Insert(0, $"Event = RowRightClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<Anime> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }
    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
